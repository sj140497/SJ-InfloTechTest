@page "/users/create"
@using UserManagement.Common.DTOs.Contracts
@using UserManagement.BlazorClient.Services
@using System.ComponentModel.DataAnnotations
@inject IUserApiService UserService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Create User</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1>Create New User</h1>
    <a href="/users" class="btn btn-outline-secondary">Back to Users</a>
</div>

<div class="row">
    <div class="col-md-6">
        <div class="card">
            <div class="card-body">
                <EditForm Model="@userForm" OnValidSubmit="@HandleValidSubmit" FormName="CreateUserForm">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="alert alert-danger" />

                    <div class="mb-3">
                        <label for="forename" class="form-label">First Name</label>
                        <InputText id="forename" class="form-control" @bind-Value="userForm.Forename" />
                        <ValidationMessage For="@(() => userForm.Forename)" />
                    </div>

                    <div class="mb-3">
                        <label for="surname" class="form-label">Last Name</label>
                        <InputText id="surname" class="form-control" @bind-Value="userForm.Surname" />
                        <ValidationMessage For="@(() => userForm.Surname)" />
                    </div>

                    <div class="mb-3">
                        <label for="email" class="form-label">Email</label>
                        <InputText id="email" type="email" class="form-control" @bind-Value="userForm.Email" />
                        <ValidationMessage For="@(() => userForm.Email)" />
                    </div>

                    <div class="mb-3">
                        <label for="dateOfBirth" class="form-label">Date of Birth</label>
                        <InputDate id="dateOfBirth" class="form-control" @bind-Value="userForm.DateOfBirth" />
                        <ValidationMessage For="@(() => userForm.DateOfBirth)" />
                    </div>

                    <div class="mb-3 form-check">
                        <InputCheckbox id="isActive" class="form-check-input" @bind-Value="userForm.IsActive" />
                        <label class="form-check-label" for="isActive">
                            Active User
                        </label>
                    </div>

                    <div class="d-grid gap-2">
                        <button type="submit" class="btn btn-primary" disabled="@isCreating">
                            @if (isCreating)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                            }
                            Create User
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    private UserFormModel userForm = new();
    private bool isCreating = false;

    public class UserFormModel
    {
        [Required, MaxLength(100)]
        public string Forename { get; set; } = "";

        [Required, MaxLength(100)]
        public string Surname { get; set; } = "";

        [Required, EmailAddress, MaxLength(200)]
        public string Email { get; set; } = "";

        [Required]
        public DateTime DateOfBirth { get; set; } = DateTime.Today.AddYears(-25);

        public bool IsActive { get; set; } = true;
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            isCreating = true;
            var createDto = new CreateUserDto(
                userForm.Forename,
                userForm.Surname,
                userForm.Email,
                userForm.DateOfBirth,
                userForm.IsActive
            );
            
            var createdUser = await UserService.CreateUserAsync(createDto);
            Navigation.NavigateTo($"/users/{createdUser.Id}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating user: {ex.Message}");
            // In production, show proper error message to user
        }
        finally
        {
            isCreating = false;
        }
    }
}
