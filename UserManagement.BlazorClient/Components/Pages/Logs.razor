@page "/logs"
@using UserManagement.Common.DTOs
@using UserManagement.BlazorClient.Services
@inject ILogApiService LogService
@rendermode InteractiveServer

<PageTitle>Activity Logs</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1>Activity Logs</h1>
    <button class="btn btn-outline-secondary" @onclick="RefreshLogs">Refresh</button>
</div>

@if (isLoading)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (paginatedLogs?.Any() == true)
{
    <!-- Summary Info -->
    <div class="d-flex justify-content-between align-items-center mb-3">
        <small class="text-muted">
            Showing @((currentPage - 1) * pageSize + 1) - @Math.Min(currentPage * pageSize, totalLogs) of @totalLogs logs
        </small>
        <small class="text-muted">
            Page @currentPage of @totalPages
        </small>
    </div>

    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Timestamp</th>
                    <th>User ID</th>
                    <th>Action</th>
                    <th>Details</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var log in paginatedLogs)
                {
                    <tr>
                        <td>@log.Timestamp.ToString("MMM dd, yyyy HH:mm:ss")</td>
                        <td>@log.UserId</td>
                        <td>
                            <span class="badge @GetActionBadgeClass(log.Action)">
                                @log.Action
                            </span>
                        </td>
                        <td>@log.Details</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Pagination Controls -->
    <nav aria-label="Logs pagination">
        <ul class="pagination justify-content-center">
            <!-- Previous Button -->
            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                <button class="page-link" @onclick="() => GoToPage(currentPage - 1)" disabled="@(currentPage == 1)">
                    Previous
                </button>
            </li>

            <!-- First Page -->
            @if (currentPage > 3)
            {
                <li class="page-item">
                    <button class="page-link" @onclick="() => GoToPage(1)">1</button>
                </li>
                @if (currentPage > 4)
                {
                    <li class="page-item disabled">
                        <span class="page-link">...</span>
                    </li>
                }
            }

            <!-- Page Numbers Around Current Page -->
            @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
            {
                <li class="page-item @(i == currentPage ? "active" : "")">
                    <button class="page-link" @onclick="() => GoToPage(i)">@i</button>
                </li>
            }

            <!-- Last Page -->
            @if (currentPage < totalPages - 2)
            {
                @if (currentPage < totalPages - 3)
                {
                    <li class="page-item disabled">
                        <span class="page-link">...</span>
                    </li>
                }
                <li class="page-item">
                    <button class="page-link" @onclick="() => GoToPage(totalPages)">@totalPages</button>
                </li>
            }

            <!-- Next Button -->
            <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                <button class="page-link" @onclick="() => GoToPage(currentPage + 1)" disabled="@(currentPage == totalPages)">
                    Next
                </button>
            </li>
        </ul>
    </nav>
}
else
{
    <div class="alert alert-info">
        <h4>No logs found</h4>
        <p>There are no activity logs to display.</p>
    </div>
}

@code {
    private PagedResultDto<UserLogDto>? pagedResult;
    private IEnumerable<UserLogDto>? paginatedLogs;
    private bool isLoading = true;
    
    // Pagination properties
    private const int pageSize = 20;
    private int currentPage = 1;
    private int totalLogs = 0;
    private int totalPages = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadLogs();
    }

    private async Task LoadLogs()
    {
        try
        {
            isLoading = true;
            pagedResult = await LogService.GetAllLogsAsync(currentPage, pageSize);
            
            if (pagedResult != null)
            {
                paginatedLogs = pagedResult.Items;
                totalLogs = pagedResult.TotalCount;
                totalPages = pagedResult.TotalPages;
                currentPage = pagedResult.CurrentPage;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading logs: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task RefreshLogs()
    {
        currentPage = 1; // Reset to first page on refresh
        await LoadLogs();
    }

    private async Task GoToPage(int page)
    {
        if (page >= 1 && page <= totalPages && page != currentPage)
        {
            currentPage = page;
            await LoadLogs();
        }
    }

    private string GetActionBadgeClass(string action)
    {
        return action.ToLower() switch
        {
            "created" => "bg-success",
            "updated" => "bg-warning",
            "deleted" => "bg-danger",
            _ => "bg-secondary"
        };
    }
}
