@page "/users"
@using UserManagement.Common.DTOs
@using UserManagement.BlazorClient.Services
@inject IUserApiService UserService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Users</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1>Users</h1>
    <a href="/users/create" class="btn btn-primary">Add New User</a>
</div>

@if (apiErrors.Any())
{
    <div class="alert alert-danger alert-dismissible" role="alert">
        <h6 class="alert-heading">
            <strong>Error:</strong>
        </h6>
        <ul class="mb-0">
            @foreach (var error in apiErrors)
            {
                <li>@error</li>
            }
        </ul>
        <button type="button" class="btn-close" @onclick="() => apiErrors.Clear()"></button>
    </div>
}

<div class="mb-3">
    <select class="form-select w-auto" @onchange="FilterUsers">
        <option value="">All Users</option>
        <option value="true">Active Only</option>
        <option value="false">Inactive Only</option>
    </select>
</div>

@if (isLoading)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (users?.Any() == true)
{
    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Email</th>
                    <th>Date of Birth</th>
                    <th>Status</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in users)
                {
                    <tr>
                        <td>@user.Forename @user.Surname</td>
                        <td>@user.Email</td>
                        <td>@user.DateOfBirth.ToString("MMM dd, yyyy")</td>
                        <td>
                            @if (user.IsActive)
                            {
                                <span class="badge bg-success">Active</span>
                            }
                            else
                            {
                                <span class="badge bg-secondary">Inactive</span>
                            }
                        </td>
                        <td>
                            <a href="/users/@user.Id" class="btn btn-sm btn-outline-primary me-1">View</a>
                            <a href="/users/@user.Id/edit" class="btn btn-sm btn-outline-secondary me-1">Edit</a>
                            <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteUser(user.Id)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else
{
    <div class="alert alert-info">
        <h4>No users found</h4>
        <p>Start by <a href="/users/create">creating a new user</a>.</p>
    </div>
}

@code {
    private IEnumerable<UserDto>? users;
    private bool isLoading = true;
    private List<string> apiErrors = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers(bool? isActive = null)
    {
        try
        {
            isLoading = true;
            apiErrors.Clear();
            users = await UserService.GetAllUsersAsync(isActive);
        }
        catch (ApiException ex)
        {
            apiErrors = ex.Errors;
        }
        catch (Exception ex)
        {
            apiErrors = new List<string> { "An error occurred while loading users. Please try again." };
            Console.WriteLine($"Error loading users: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task FilterUsers(ChangeEventArgs e)
    {
        var value = e.Value?.ToString();
        bool? isActive = value switch
        {
            "true" => true,
            "false" => false,
            _ => null
        };
        await LoadUsers(isActive);
    }

    private async Task DeleteUser(long id)
    {
        if (confirm("Are you sure you want to delete this user?"))
        {
            try
            {
                apiErrors.Clear();
                await UserService.DeleteUserAsync(id);
                await LoadUsers();
            }
            catch (ApiException ex)
            {
                apiErrors = ex.Errors;
            }
            catch (Exception ex)
            {
                apiErrors = new List<string> { "An error occurred while deleting the user. Please try again." };
                Console.WriteLine($"Error deleting user: {ex.Message}");
            }
        }
    }

    private bool confirm(string message)
    {
        // Simple confirmation - in production you'd want a proper modal
        return true; // For now, always confirm
    }
}
