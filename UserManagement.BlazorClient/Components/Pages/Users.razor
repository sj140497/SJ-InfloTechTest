@page "/users"
@using UserManagement.Common.DTOs
@using UserManagement.BlazorClient.Services
@inject IUserApiService UserService
@inject NavigationManager Navigation
@inject IJSRuntime JS
@rendermode InteractiveServer

<PageTitle>User Management</PageTitle>

<div class="container-fluid py-4">
    <div class="row">
        <div class="col-12">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                    <h3 class="mb-0">
                        <i class="fas fa-users me-2"></i>
                        User Management
                    </h3>
                    <button class="btn btn-light" @onclick="CreateUser">
                        <i class="fas fa-plus me-2"></i>
                        Add User
                    </button>
                </div>
                <div class="card-body">
                    <!-- Filter Controls -->
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <div class="input-group">
                                <span class="input-group-text">
                                    <i class="fas fa-filter"></i>
                                </span>
                                <select class="form-select" @onchange="FilterUsers">
                                    <option value="">All Users</option>
                                    <option value="true">Active Only</option>
                                    <option value="false">Inactive Only</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-6 text-end">
                            <button class="btn btn-outline-secondary" @onclick="RefreshUsers">
                                <i class="fas fa-refresh me-2"></i>
                                Refresh
                            </button>
                        </div>
                    </div>

                    @if (isLoading)
                    {
                        <div class="text-center py-5">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-2 text-muted">Loading users...</p>
                        </div>
                    }
                    else if (users == null || !users.Any())
                    {
                        <div class="text-center py-5">
                            <i class="fas fa-users fa-3x text-muted mb-3"></i>
                            <h5 class="text-muted">No users found</h5>
                            <p class="text-muted">Start by adding a new user.</p>
                        </div>
                    }
                    else
                    {
                        <!-- Users Table -->
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead class="table-light">
                                    <tr>
                                        <th>Name</th>
                                        <th>Email</th>
                                        <th>Date of Birth</th>
                                        <th>Status</th>
                                        <th class="text-end">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var user in users)
                                    {
                                        <tr>
                                            <td>
                                                <div class="d-flex align-items-center">
                                                    <div class="avatar-circle me-3">
                                                        @user.Forename.First()@user.Surname.First()
                                                    </div>
                                                    <div>
                                                        <div class="fw-semibold">@user.Forename @user.Surname</div>
                                                        <small class="text-muted">ID: @user.Id</small>
                                                    </div>
                                                </div>
                                            </td>
                                            <td>
                                                <i class="fas fa-envelope text-muted me-2"></i>
                                                @user.Email
                                            </td>
                                            <td>
                                                <i class="fas fa-calendar text-muted me-2"></i>
                                                @user.DateOfBirth.ToString("MMM dd, yyyy")
                                                <br>
                                                <small class="text-muted">Age: @CalculateAge(user.DateOfBirth)</small>
                                            </td>
                                            <td>
                                                @if (user.IsActive)
                                                {
                                                    <span class="badge bg-success">
                                                        <i class="fas fa-check me-1"></i>
                                                        Active
                                                    </span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-secondary">
                                                        <i class="fas fa-times me-1"></i>
                                                        Inactive
                                                    </span>
                                                }
                                            </td>
                                            <td class="text-end">
                                                <div class="btn-group" role="group">
                                                    <button class="btn btn-sm btn-outline-primary" 
                                                            @onclick="() => ViewUser(user.Id)"
                                                            title="View Details">
                                                        <i class="fas fa-eye"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-warning" 
                                                            @onclick="() => EditUser(user.Id)"
                                                            title="Edit User">
                                                        <i class="fas fa-edit"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-danger" 
                                                            @onclick="() => ConfirmDelete(user)"
                                                            title="Delete User">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        <!-- Summary -->
                        <div class="mt-3 text-muted">
                            <small>
                                Total: @users.Count() users 
                                (@users.Count(u => u.IsActive) active, @users.Count(u => !u.IsActive) inactive)
                            </small>
                        </div>
                    }
                </div>
                <div class="card-footer text-center">
                    <button class="btn btn-info" @onclick="ViewAllLogs">
                        <i class="fas fa-list me-2"></i>
                        View All Logs
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@if (showDeleteModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Delete</h5>
                    <button type="button" class="btn-close" @onclick="() => showDeleteModal = false"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete <strong>@userToDelete?.Forename @userToDelete?.Surname</strong>?</p>
                    <p class="text-danger">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        This action cannot be undone.
                    </p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => showDeleteModal = false">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteUser" disabled="@isDeleting">
                        @if (isDeleting)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        Delete
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<style>
    .avatar-circle {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background: linear-gradient(45deg, #007bff, #0056b3);
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
        font-size: 14px;
    }
    
    .card {
        border: none;
        border-radius: 12px;
    }
    
    .card-header {
        border-radius: 12px 12px 0 0 !important;
    }
    
    .btn-group .btn {
        margin: 0 2px;
    }
    
    .table th {
        border-top: none;
        font-weight: 600;
        color: #495057;
    }
    
    .table td {
        vertical-align: middle;
    }
    
    .badge {
        font-size: 0.75em;
    }
</style>

@code {
    private IEnumerable<UserDto>? users;
    private bool isLoading = true;
    private bool showDeleteModal = false;
    private bool isDeleting = false;
    private UserDto? userToDelete;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers(bool? isActive = null)
    {
        try
        {
            isLoading = true;
            users = await UserService.GetAllUsersAsync(isActive);
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error loading users: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task FilterUsers(ChangeEventArgs e)
    {
        var value = e.Value?.ToString();
        bool? isActive = value switch
        {
            "true" => true,
            "false" => false,
            _ => null
        };
        await LoadUsers(isActive);
    }

    private async Task RefreshUsers()
    {
        await LoadUsers();
    }

    private void ViewUser(long id)
    {
        Navigation.NavigateTo($"/users/{id}");
    }

    private void EditUser(long id)
    {
        Navigation.NavigateTo($"/users/{id}/edit");
    }

    private void CreateUser()
    {
        Navigation.NavigateTo("/users/create");
    }

    private void ViewAllLogs()
    {
        Navigation.NavigateTo("/logs");
    }

    private void ConfirmDelete(UserDto user)
    {
        userToDelete = user;
        showDeleteModal = true;
    }

    private async Task DeleteUser()
    {
        if (userToDelete == null) return;

        try
        {
            isDeleting = true;
            await UserService.DeleteUserAsync(userToDelete.Id);
            await LoadUsers();
            showDeleteModal = false;
            userToDelete = null;
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error deleting user: {ex.Message}");
        }
        finally
        {
            isDeleting = false;
        }
    }

    private int CalculateAge(DateTime birthDate)
    {
        var today = DateTime.Today;
        var age = today.Year - birthDate.Year;
        if (birthDate.Date > today.AddYears(-age)) age--;
        return age;
    }
}
