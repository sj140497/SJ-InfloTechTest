@page "/users/{id:long}"
@using UserManagement.Common.DTOs
@using UserManagement.BlazorClient.Services
@inject IUserApiService UserService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>User Details</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1>User Details</h1>
    <div>
        <a href="/users/@Id/edit" class="btn btn-secondary me-2">Edit</a>
        <a href="/users" class="btn btn-outline-secondary">Back to Users</a>
    </div>
</div>

@if (apiErrors.Any())
{
    <div class="alert alert-danger" role="alert">
        <h6 class="alert-heading">
            <strong>Error:</strong>
        </h6>
        <ul class="mb-0">
            @foreach (var error in apiErrors)
            {
                <li>@error</li>
            }
        </ul>
    </div>
}

@if (isLoading)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (user != null)
{
    <div class="row">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">User Information</h5>
                </div>
                <div class="card-body">
                    <table class="table table-borderless">
                        <tr>
                            <th>ID:</th>
                            <td>@user.Id</td>
                        </tr>
                        <tr>
                            <th>Name:</th>
                            <td>@user.Forename @user.Surname</td>
                        </tr>
                        <tr>
                            <th>Email:</th>
                            <td>@user.Email</td>
                        </tr>
                        <tr>
                            <th>Date of Birth:</th>
                            <td>@user.DateOfBirth.ToString("MMMM dd, yyyy")</td>
                        </tr>
                        <tr>
                            <th>Status:</th>
                            <td>
                                @if (user.IsActive)
                                {
                                    <span class="badge bg-success">Active</span>
                                }
                                else
                                {
                                    <span class="badge bg-secondary">Inactive</span>
                                }
                            </td>
                        </tr>
                    </table>
                </div>
            </div>
        </div>
        
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Recent Activity</h5>
                </div>
                <div class="card-body">
                    @if (user.RecentLogs?.Any() == true)
                    {
                        <ul class="list-unstyled">
                            @foreach (var log in user.RecentLogs.Take(5))
                            {
                                <li class="mb-2">
                                    <small class="text-muted">@log.Timestamp.ToString("MMM dd, HH:mm")</small><br>
                                    <span>@log.Action</span>
                                </li>
                            }
                        </ul>
                    }
                    else
                    {
                        <p class="text-muted">No recent activity</p>
                    }
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="alert alert-danger">
        <h4>User Not Found</h4>
        <p>The user you're looking for doesn't exist.</p>
        <a href="/users" class="btn btn-primary">Back to Users</a>
    </div>
}

@code {
    [Parameter] public long Id { get; set; }
    
    private UserDetailDto? user;
    private bool isLoading = true;
    private List<string> apiErrors = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadUser();
    }

    private async Task LoadUser()
    {
        try
        {
            isLoading = true;
            apiErrors.Clear();
            user = await UserService.GetUserAsync(Id);
        }
        catch (ApiException ex)
        {
            apiErrors = ex.Errors;
            user = null;
        }
        catch (Exception ex)
        {
            apiErrors = new List<string> { "An error occurred while loading user details. Please try again." };
            Console.WriteLine($"Error loading user: {ex.Message}");
            user = null;
        }
        finally
        {
            isLoading = false;
        }
    }
}
